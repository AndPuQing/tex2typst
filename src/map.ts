export const symbolMap = new Map<string, string>([
    ['gets', 'arrow.l'],
    ['infty', 'infinity'], // infinity
    ['nonumber', ''],
    ['vec', 'arrow'],
    ['mathbf', 'bold'],
    ['boldsymbol', 'bold'],
    ['mathfrak', 'frak'],
    ['neq', 'eq.not'],
    ['dot', 'dot'],
    ['ddot', 'dot.double'],
    ['doteq', 'dot(eq)'],
    ['dots', 'dots.h'],
    ['ldots', 'dots.h'],
    ['vdots', 'dots.v'],
    ['ddots', 'dots.down'],
    ['cdots', 'dots.h.c'],
    ['widehat', 'hat'], // Ideally, the result of \widehat should be longer than \hat. But it is not implemented now.
    ['widetilde', 'tilde'], // Ideally, the result of \widetilde should be longer than \tilde. But it is not implemented now.
    ['quad', 'quad'],
    ['qquad', 'wide'],
    ['overbrace', 'overbrace'], // same
    ['underbrace', 'underbrace'], // same
    ['overline', 'overline'], // same
    ['underline', 'underline'], // same
    ['bar', 'macron'],

    ['mathbb', 'bb'],
    ['mathcal', 'cal'],
    // TODO: This result it not proper. A solution is define scr in Typst code:
    // #let scr(a) = text(font: "STIX Two Math", stylistic-set: 01)[#math.cal(a)]
    // https://qiita.com/Yarakashi_Kikohshi/items/b7beaa0fba62a527df2b
    // https://github.com/typst/typst/issues/1431
    ['mathscr', 'cal'],

    ['mathrm', 'upright'],
    ['rm', 'upright'],

    // TODO: \pmb need special logic to handle but it is not implemented now. See the commented test case.
    ['pmb', 'bold'],

    /* variants of plus,minus,times,divide */
    ['pm', 'plus.minus'],
    ['mp', 'minus.plus'],
    ['oplus', 'xor'], // \oplus and also be plus.circle
    ['boxplus', 'plus.square'],
    ['otimes', 'times.circle'],
    ['boxtimes', 'times.square'],

    /* symbols in mathematical logic */
    ['neg', 'not'],
    ['land', 'and'],
    ['lor', 'or'],

    ['varnothing', 'diameter'], // empty set

    /* symbols about comparing numbers */
    // tex: \neq \leq \geq \ll \gg \prec \succ \preceq \succeq
    // typst: eq.not lt.eq gt.eq lt.double gt.double prec succ prec.eq succ.eq
    ['neq', 'eq.not'],
    ['leq', 'lt.eq'],
    ['geq', 'gt.eq'],
    ['ll', 'lt.double'],
    ['gg', 'gt.double'],
    ['prec', 'prec'],
    ['succ', 'succ'],
    ['preceq', 'prec.eq'],
    ['succeq', 'succ.eq'],

    /* symbols about differential */
    ['Delta', 'Delta'],
    ['nabla', 'nabla'],
    ['partial', 'diff'],

    /* symbols about integral */
    // tex: \int \oint \iint \oiint \iiint \oiiint
    // typst: integral integral.cont integral.double integral.surf integral.triple integral.vol
    ['int', 'integral'],
    ['oint', 'integral.cont'],
    ['iint', 'integral.double'],
    ['oiint', 'integral.surf'],
    ['iiint', 'integral.triple'],
    ['oiiint', 'integral.vol'],

    /* wave */
    // tex: \sim \approx \cong \simeq \asymp \equiv \propto
    // typst: tilde approx tilde.equiv tilde.eq ≍ equiv prop
    ['sim', 'tilde'],
    ['approx', 'approx'],
    ['cong', 'tilde.equiv'],
    ['simeq', 'tilde.eq'],
    ['asymp', '≍'],   // just use the unicode character :-)
    ['equiv', 'equiv'],
    ['propto', 'prop'],

    /* arrows used in proofs */
    // tex: \implies \iff \leftrightarrow \longleftrightarrow \rightrightarrows
    // typst: arrow.r.double.long arrow.l.r.double.long arrow.l.r arrow.l.r.long arrows.rr
    ['implies', 'arrow.r.double.long'],
    ['Longrightarrow', 'arrow.r.double.long'], // Note: This macro is not supported by KaTeX
    ['iff', 'arrow.l.r.double.long'],
    ['Longleftrightarrow', 'arrow.l.r.double.long'], // Note: This macro is not supported by KaTeX
    ['leftrightarrow', 'arrow.l.r'],
    ['longleftrightarrow', 'arrow.l.r.long'],
    ['rightrightarrows', 'arrows.rr'],

    ['binom', 'binom'],

    /* left and right floor,ceil */
    // tex: \lfloor \rfloor \lceil \rceil
    // typst: ⌊ ⌋ ⌈ ⌉ 
    // TODO: Ideally, \lfloor x \rfloor should be translated to floor(x) but it is not implemented now.
    // The KaTeX parser parses it as \lfloor x \rfloor. So it would take some effort to implement it.
    ['lfloor', '⌊'],
    ['rfloor', '⌋'],
    ['lceil', '⌈'],
    ['rceil', '⌉'],


    ['Cap', 'sect.double'], 
    ['Cup', 'union.double'], 
    ['Delta', 'Delta'], 
    ['Gamma', 'Gamma'], 
    ['Join', 'join'], 
    ['Lambda', 'Lambda'], 
    ['Longrightarrow', 'arrow.r.double.long'], 
    ['Omega', 'Omega'], 
    ['Phi', 'Phi'], 
    ['Pi', 'Pi'], 
    ['Psi', 'Psi'], 
    ['Rightarrow', 'arrow.double'], 
    ['Sigma', 'Sigma'], 
    ['Theta', 'Theta'], 
    ['aleph', 'alef'], 
    ['alpha', 'alpha'], 
    // ['amalg', 'product.co'], 
    ['angle', 'angle'], 
    ['approx', 'approx'], 
    ['approxeq', 'approx.eq'], 
    ['ast', 'ast'], 
    ['beta', 'beta'], 
    ['bigcap', 'sect.big'], 
    ['bigcirc', 'circle.big'], 
    ['bigcup', 'union.big'], 
    ['bigodot', 'dot.circle.big'], 
    ['bigoplus', 'xor.big'], // or "plus.circle.big"
    ['bigotimes', 'times.circle.big'], 
    ['bigsqcup', 'union.sq.big'], 
    ['bigtriangledown', 'triangle.b'], 
    ['bigtriangleup', 'triangle.t'], 
    ['biguplus', 'union.plus.big'], 
    ['bigvee', 'or.big'], 
    ['bigwedge', 'and.big'], 
    // ['bowtie', 'join'], 
    ['bullet', 'bullet'], 
    ['cap', 'sect'], 
    ['cdot', 'dot.op'],  // 'dot.op' or 'dot.c'
    ['cdots', 'dots.c'], 
    ['checkmark', 'checkmark'], 
    ['chi', 'chi'], 
    ['circ', 'circle.small'],  // 'circle.small' or 'compose'
    ['colon', 'colon'], 
    ['cong', 'tilde.equiv'], 
    ['coprod', 'product.co'], 
    ['cup', 'union'], 
    ['curlyvee', 'or.curly'], 
    ['curlywedge', 'and.curly'], 
    ['dagger', 'dagger'], 
    ['dashv', 'tack.l'], 
    ['ddagger', 'dagger.double'], 
    ['delta', 'delta'], 
    ['ddots', 'dots.down'], 
    ['diamond', 'diamond'], 
    ['div', 'div'], 
    ['divideontimes', 'times.div'], 
    ['dotplus', 'plus.dot'], 
    ['downarrow', 'arrow.b'], 
    ['ell', 'ell'], 
    ['emptyset', 'nothing'], 
    ['epsilon', 'epsilon.alt'], 
    ['equiv', 'equiv'], 
    ['eta', 'eta'], 
    ['exists', 'exists'], 
    ['forall', 'forall'], 
    // ['frown', 'paren.t'], 
    ['gamma', 'gamma'], 
    ['ge', 'gt.eq'], 
    ['geq', 'gt.eq'], 
    ['geqslant', 'gt.eq.slant'], 
    ['gg', 'gt.double'], 
    ['hbar', 'planck.reduce'], 
    ['imath', 'dotless.i'], 
    ['iiiint', 'intgral.quad'], 
    ['iiint', 'integral.triple'], 
    ['iint', 'integral.double'], 
    ['in', 'in'], 
    ['int', 'integral'], 
    ['intercal', 'top'],  // 'top' or 'tack.b'
    ['iota', 'iota'], 
    ['jmath', 'dotless.j'], 
    ['kappa', 'kappa'], 
    ['lambda', 'lambda'], 
    ['langle', 'angle.l'], 
    ['lbrace', 'brace.l'], 
    ['lbrack', 'bracket.l'], 
    ['ldots', 'dots.l'], 
    ['le', 'lt.eq'], 
    ['leadsto', 'arrow.squiggly'], 
    ['leftarrow', 'arrow.l'], 
    ['leftthreetimes', 'times.three.l'], 
    ['leftrightarrow', 'arrow.l.r'], 
    ['leq', 'lt.eq'], 
    ['leqslant', 'lt.eq.slant'], 
    ['lhd', 'triangle.l'], 
    ['ll', 'lt.double'], 
    ['longmapsto', 'arrow.long.bar'], 
    ['longrightarrow', 'arrow.long'], 
    ['ltimes', 'times.l'], 
    ['mapsto', 'arrow.bar'], 
    ['measuredangle', 'angle.arc'], 
    ['mid', 'divides'], 
    ['models', 'models'], 
    ['mp', 'minus.plus'], 
    ['mu', 'mu'], 
    ['nRightarrow', 'arrow.double.not'], 
    ['nabla', 'nabla'], 
    ['ncong', 'tilde.nequiv'], 
    ['ne', 'eq.not'], 
    ['neg', 'not'], 
    ['neq', 'eq.not'], 
    ['nmid', 'divides.not'], 
    ['notin', 'in.not'], 
    ['nleftarrow', 'arrow.l.not'], 
    ['nrightarrow', 'arrow.not'], 
    ['nsim', 'tilde.not'], 
    ['nu', 'nu'], 
    ['odot', 'dot.circle'], 
    ['oint', 'integral.cont'], 
    ['omega', 'omega'], 
    // ['omicron', 'omicron'], 
    ['ominus', 'minus.circle'], 
    ['oplus', 'xor'], // or 'plus.circle'
    ['otimes', 'times.circle'], 
    ['parallel', 'parallel'], 
    ['partial', 'diff'], 
    ['perp', 'perp'], 
    ['phi', 'phi.alt'], 
    ['pi', 'pi'], 
    ['pm', 'plus.minus'], 
    ['prec', 'prec'], 
    ['preceq', 'prec.eq'], 
    ['prime', 'prime'], 
    ['prod', 'product'], 
    ['propto', 'prop'], 
    ['psi', 'psi'], 
    ['rangle', 'angle.r'], 
    ['rbrace', 'brace.r'], 
    ['rbrack', 'bracket.r'], 
    ['rhd', 'triangle'], 
    ['rho', 'rho'], 
    ['rightarrow', 'arrow.r'], 
    ['rightthreetimes', 'times.three.r'], 
    ['rtimes', 'times.r'], 
    ['setminus', 'without'], 
    ['sigma', 'sigma'], 
    ['sim', 'tilde'], 
    ['simeq', 'tilde.eq'], 
    // ['smile', 'paren.b'], 
    ['sqcap', 'sect.sq'], 
    ['sqcup', 'union.sq'], 
    ['star', 'star'], 
    ['subset', 'subset'], 
    ['subseteq', 'subset.eq'], 
    ['subsetneq', 'subset.neq'], 
    ['succ', 'succ'], 
    ['succeq', 'succ.eq'], 
    ['sum', 'sum'], 
    ['supset', 'supset'], 
    ['supseteq', 'supset.eq'], 
    ['supsetneq', 'supset.neq'], 
    ['tau', 'tau'], 
    ['theta', 'theta'], 
    ['times', 'times'], 
    ['to', 'arrow.r'], 
    ['triangle', 'triangle.t'], 
    ['triangleleft', 'triangle.l.small'], 
    ['triangleright', 'triangle.small'], 
    ['uparrow', 'arrow.t'], 
    ['updownarrow', 'arrow.t.b'], 
    ['upharpoonright', 'harpoon.tr'], 
    ['uplus', 'union.plus'], 
    ['upsilon', 'upsilon'], 
    ['varepsilon', 'epsilon'], 
    ['varphi', 'phi'], 
    ['varpi', 'pi.alt'], 
    ['varrho', 'rho.alt'], 
    ['varsigma', 'sigma.alt'], 
    ['vartheta', 'theta.alt'], 
    ['vdash', 'tack.r'], 
    ['vdots', 'dots.v'], 
    ['vee', 'or'], 
    ['wedge', 'and'], 
    ['wr', 'wreath'], 
    ['xi', 'xi'], 
    ['zeta', 'zeta'], 
]);
